// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String
  provider Provider
  streams  Stream[] // One-to-many relationship (User -> Stream)
  upvotes  Upvote[] // One-to-many relationship (User -> Upvote) - this is added
}

model Stream {
  id              String     @id @default(uuid())
  type            StreamType
  url             String
  extractedId     String
  active          Boolean    @default(true)
  upvotes         Upvote[] // One-to-many relationship (Stream -> Upvote)
  userId          String
  user            User       @relation(fields: [userId], references: [id]) // Many-to-one relationship (Stream -> User)
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  user     User   @relation(fields: [userId], references: [id]) // Many-to-one relationship (Upvote -> User)
  stream   Stream @relation(fields: [streamId], references: [id]) // Many-to-one relationship (Upvote -> Stream)

  @@unique([userId, streamId]) // Ensures each user can only upvote a stream once
}

enum StreamType {
  Spotify
  YouTube
}

enum Provider {
  Google
}
